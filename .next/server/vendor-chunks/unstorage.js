"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/unstorage";
exports.ids = ["vendor-chunks/unstorage"];
exports.modules = {

/***/ "(ssr)/./node_modules/unstorage/dist/index.mjs":
/*!***********************************************!*\
  !*** ./node_modules/unstorage/dist/index.mjs ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   builtinDrivers: () => (/* binding */ builtinDrivers),\n/* harmony export */   createStorage: () => (/* binding */ createStorage),\n/* harmony export */   defineDriver: () => (/* binding */ defineDriver),\n/* harmony export */   filterKeyByBase: () => (/* reexport safe */ _shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.c),\n/* harmony export */   filterKeyByDepth: () => (/* reexport safe */ _shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.f),\n/* harmony export */   joinKeys: () => (/* reexport safe */ _shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.j),\n/* harmony export */   normalizeBaseKey: () => (/* reexport safe */ _shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.n),\n/* harmony export */   normalizeKey: () => (/* reexport safe */ _shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.a),\n/* harmony export */   prefixStorage: () => (/* reexport safe */ _shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.p),\n/* harmony export */   restoreSnapshot: () => (/* binding */ restoreSnapshot),\n/* harmony export */   snapshot: () => (/* binding */ snapshot)\n/* harmony export */ });\n/* harmony import */ var destr__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! destr */ \"(ssr)/./node_modules/destr/dist/index.mjs\");\n/* harmony import */ var _shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./shared/unstorage.CoCt7NXC.mjs */ \"(ssr)/./node_modules/unstorage/dist/shared/unstorage.CoCt7NXC.mjs\");\n\n\n\n\nfunction defineDriver(factory) {\n  return factory;\n}\n\nconst DRIVER_NAME = \"memory\";\nconst memory = defineDriver(() => {\n  const data = /* @__PURE__ */ new Map();\n  return {\n    name: DRIVER_NAME,\n    getInstance: () => data,\n    hasItem(key) {\n      return data.has(key);\n    },\n    getItem(key) {\n      return data.get(key) ?? null;\n    },\n    getItemRaw(key) {\n      return data.get(key) ?? null;\n    },\n    setItem(key, value) {\n      data.set(key, value);\n    },\n    setItemRaw(key, value) {\n      data.set(key, value);\n    },\n    removeItem(key) {\n      data.delete(key);\n    },\n    getKeys() {\n      return [...data.keys()];\n    },\n    clear() {\n      data.clear();\n    },\n    dispose() {\n      data.clear();\n    }\n  };\n});\n\nfunction createStorage(options = {}) {\n  const context = {\n    mounts: { \"\": options.driver || memory() },\n    mountpoints: [\"\"],\n    watching: false,\n    watchListeners: [],\n    unwatch: {}\n  };\n  const getMount = (key) => {\n    for (const base of context.mountpoints) {\n      if (key.startsWith(base)) {\n        return {\n          base,\n          relativeKey: key.slice(base.length),\n          driver: context.mounts[base]\n        };\n      }\n    }\n    return {\n      base: \"\",\n      relativeKey: key,\n      driver: context.mounts[\"\"]\n    };\n  };\n  const getMounts = (base, includeParent) => {\n    return context.mountpoints.filter(\n      (mountpoint) => mountpoint.startsWith(base) || includeParent && base.startsWith(mountpoint)\n    ).map((mountpoint) => ({\n      relativeBase: base.length > mountpoint.length ? base.slice(mountpoint.length) : void 0,\n      mountpoint,\n      driver: context.mounts[mountpoint]\n    }));\n  };\n  const onChange = (event, key) => {\n    if (!context.watching) {\n      return;\n    }\n    key = (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(key);\n    for (const listener of context.watchListeners) {\n      listener(event, key);\n    }\n  };\n  const startWatch = async () => {\n    if (context.watching) {\n      return;\n    }\n    context.watching = true;\n    for (const mountpoint in context.mounts) {\n      context.unwatch[mountpoint] = await watch(\n        context.mounts[mountpoint],\n        onChange,\n        mountpoint\n      );\n    }\n  };\n  const stopWatch = async () => {\n    if (!context.watching) {\n      return;\n    }\n    for (const mountpoint in context.unwatch) {\n      await context.unwatch[mountpoint]();\n    }\n    context.unwatch = {};\n    context.watching = false;\n  };\n  const runBatch = (items, commonOptions, cb) => {\n    const batches = /* @__PURE__ */ new Map();\n    const getBatch = (mount) => {\n      let batch = batches.get(mount.base);\n      if (!batch) {\n        batch = {\n          driver: mount.driver,\n          base: mount.base,\n          items: []\n        };\n        batches.set(mount.base, batch);\n      }\n      return batch;\n    };\n    for (const item of items) {\n      const isStringItem = typeof item === \"string\";\n      const key = (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(isStringItem ? item : item.key);\n      const value = isStringItem ? void 0 : item.value;\n      const options2 = isStringItem || !item.options ? commonOptions : { ...commonOptions, ...item.options };\n      const mount = getMount(key);\n      getBatch(mount).items.push({\n        key,\n        value,\n        relativeKey: mount.relativeKey,\n        options: options2\n      });\n    }\n    return Promise.all([...batches.values()].map((batch) => cb(batch))).then(\n      (r) => r.flat()\n    );\n  };\n  const storage = {\n    // Item\n    hasItem(key, opts = {}) {\n      key = (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(key);\n      const { relativeKey, driver } = getMount(key);\n      return (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(driver.hasItem, relativeKey, opts);\n    },\n    getItem(key, opts = {}) {\n      key = (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(key);\n      const { relativeKey, driver } = getMount(key);\n      return (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(driver.getItem, relativeKey, opts).then(\n        (value) => (0,destr__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(value)\n      );\n    },\n    getItems(items, commonOptions = {}) {\n      return runBatch(items, commonOptions, (batch) => {\n        if (batch.driver.getItems) {\n          return (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(\n            batch.driver.getItems,\n            batch.items.map((item) => ({\n              key: item.relativeKey,\n              options: item.options\n            })),\n            commonOptions\n          ).then(\n            (r) => r.map((item) => ({\n              key: (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.j)(batch.base, item.key),\n              value: (0,destr__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(item.value)\n            }))\n          );\n        }\n        return Promise.all(\n          batch.items.map((item) => {\n            return (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(\n              batch.driver.getItem,\n              item.relativeKey,\n              item.options\n            ).then((value) => ({\n              key: item.key,\n              value: (0,destr__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(value)\n            }));\n          })\n        );\n      });\n    },\n    getItemRaw(key, opts = {}) {\n      key = (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(key);\n      const { relativeKey, driver } = getMount(key);\n      if (driver.getItemRaw) {\n        return (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(driver.getItemRaw, relativeKey, opts);\n      }\n      return (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(driver.getItem, relativeKey, opts).then(\n        (value) => (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.e)(value)\n      );\n    },\n    async setItem(key, value, opts = {}) {\n      if (value === void 0) {\n        return storage.removeItem(key);\n      }\n      key = (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(key);\n      const { relativeKey, driver } = getMount(key);\n      if (!driver.setItem) {\n        return;\n      }\n      await (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(driver.setItem, relativeKey, (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.d)(value), opts);\n      if (!driver.watch) {\n        onChange(\"update\", key);\n      }\n    },\n    async setItems(items, commonOptions) {\n      await runBatch(items, commonOptions, async (batch) => {\n        if (batch.driver.setItems) {\n          return (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(\n            batch.driver.setItems,\n            batch.items.map((item) => ({\n              key: item.relativeKey,\n              value: (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.d)(item.value),\n              options: item.options\n            })),\n            commonOptions\n          );\n        }\n        if (!batch.driver.setItem) {\n          return;\n        }\n        await Promise.all(\n          batch.items.map((item) => {\n            return (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(\n              batch.driver.setItem,\n              item.relativeKey,\n              (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.d)(item.value),\n              item.options\n            );\n          })\n        );\n      });\n    },\n    async setItemRaw(key, value, opts = {}) {\n      if (value === void 0) {\n        return storage.removeItem(key, opts);\n      }\n      key = (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(key);\n      const { relativeKey, driver } = getMount(key);\n      if (driver.setItemRaw) {\n        await (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(driver.setItemRaw, relativeKey, value, opts);\n      } else if (driver.setItem) {\n        await (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(driver.setItem, relativeKey, (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.s)(value), opts);\n      } else {\n        return;\n      }\n      if (!driver.watch) {\n        onChange(\"update\", key);\n      }\n    },\n    async removeItem(key, opts = {}) {\n      if (typeof opts === \"boolean\") {\n        opts = { removeMeta: opts };\n      }\n      key = (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(key);\n      const { relativeKey, driver } = getMount(key);\n      if (!driver.removeItem) {\n        return;\n      }\n      await (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(driver.removeItem, relativeKey, opts);\n      if (opts.removeMeta || opts.removeMata) {\n        await (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(driver.removeItem, relativeKey + \"$\", opts);\n      }\n      if (!driver.watch) {\n        onChange(\"remove\", key);\n      }\n    },\n    // Meta\n    async getMeta(key, opts = {}) {\n      if (typeof opts === \"boolean\") {\n        opts = { nativeOnly: opts };\n      }\n      key = (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(key);\n      const { relativeKey, driver } = getMount(key);\n      const meta = /* @__PURE__ */ Object.create(null);\n      if (driver.getMeta) {\n        Object.assign(meta, await (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(driver.getMeta, relativeKey, opts));\n      }\n      if (!opts.nativeOnly) {\n        const value = await (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(\n          driver.getItem,\n          relativeKey + \"$\",\n          opts\n        ).then((value_) => (0,destr__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(value_));\n        if (value && typeof value === \"object\") {\n          if (typeof value.atime === \"string\") {\n            value.atime = new Date(value.atime);\n          }\n          if (typeof value.mtime === \"string\") {\n            value.mtime = new Date(value.mtime);\n          }\n          Object.assign(meta, value);\n        }\n      }\n      return meta;\n    },\n    setMeta(key, value, opts = {}) {\n      return this.setItem(key + \"$\", value, opts);\n    },\n    removeMeta(key, opts = {}) {\n      return this.removeItem(key + \"$\", opts);\n    },\n    // Keys\n    async getKeys(base, opts = {}) {\n      base = (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.n)(base);\n      const mounts = getMounts(base, true);\n      let maskedMounts = [];\n      const allKeys = [];\n      let allMountsSupportMaxDepth = true;\n      for (const mount of mounts) {\n        if (!mount.driver.flags?.maxDepth) {\n          allMountsSupportMaxDepth = false;\n        }\n        const rawKeys = await (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(\n          mount.driver.getKeys,\n          mount.relativeBase,\n          opts\n        );\n        for (const key of rawKeys) {\n          const fullKey = mount.mountpoint + (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(key);\n          if (!maskedMounts.some((p) => fullKey.startsWith(p))) {\n            allKeys.push(fullKey);\n          }\n        }\n        maskedMounts = [\n          mount.mountpoint,\n          ...maskedMounts.filter((p) => !p.startsWith(mount.mountpoint))\n        ];\n      }\n      const shouldFilterByDepth = opts.maxDepth !== void 0 && !allMountsSupportMaxDepth;\n      return allKeys.filter(\n        (key) => (!shouldFilterByDepth || (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.f)(key, opts.maxDepth)) && (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(key, base)\n      );\n    },\n    // Utils\n    async clear(base, opts = {}) {\n      base = (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.n)(base);\n      await Promise.all(\n        getMounts(base, false).map(async (m) => {\n          if (m.driver.clear) {\n            return (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(m.driver.clear, m.relativeBase, opts);\n          }\n          if (m.driver.removeItem) {\n            const keys = await m.driver.getKeys(m.relativeBase || \"\", opts);\n            return Promise.all(\n              keys.map((key) => m.driver.removeItem(key, opts))\n            );\n          }\n        })\n      );\n    },\n    async dispose() {\n      await Promise.all(\n        Object.values(context.mounts).map((driver) => dispose(driver))\n      );\n    },\n    async watch(callback) {\n      await startWatch();\n      context.watchListeners.push(callback);\n      return async () => {\n        context.watchListeners = context.watchListeners.filter(\n          (listener) => listener !== callback\n        );\n        if (context.watchListeners.length === 0) {\n          await stopWatch();\n        }\n      };\n    },\n    async unwatch() {\n      context.watchListeners = [];\n      await stopWatch();\n    },\n    // Mount\n    mount(base, driver) {\n      base = (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.n)(base);\n      if (base && context.mounts[base]) {\n        throw new Error(`already mounted at ${base}`);\n      }\n      if (base) {\n        context.mountpoints.push(base);\n        context.mountpoints.sort((a, b) => b.length - a.length);\n      }\n      context.mounts[base] = driver;\n      if (context.watching) {\n        Promise.resolve(watch(driver, onChange, base)).then((unwatcher) => {\n          context.unwatch[base] = unwatcher;\n        }).catch(console.error);\n      }\n      return storage;\n    },\n    async unmount(base, _dispose = true) {\n      base = (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.n)(base);\n      if (!base || !context.mounts[base]) {\n        return;\n      }\n      if (context.watching && base in context.unwatch) {\n        context.unwatch[base]?.();\n        delete context.unwatch[base];\n      }\n      if (_dispose) {\n        await dispose(context.mounts[base]);\n      }\n      context.mountpoints = context.mountpoints.filter((key) => key !== base);\n      delete context.mounts[base];\n    },\n    getMount(key = \"\") {\n      key = (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(key) + \":\";\n      const m = getMount(key);\n      return {\n        driver: m.driver,\n        base: m.base\n      };\n    },\n    getMounts(base = \"\", opts = {}) {\n      base = (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.a)(base);\n      const mounts = getMounts(base, opts.parents);\n      return mounts.map((m) => ({\n        driver: m.driver,\n        base: m.mountpoint\n      }));\n    },\n    // Aliases\n    keys: (base, opts = {}) => storage.getKeys(base, opts),\n    get: (key, opts = {}) => storage.getItem(key, opts),\n    set: (key, value, opts = {}) => storage.setItem(key, value, opts),\n    has: (key, opts = {}) => storage.hasItem(key, opts),\n    del: (key, opts = {}) => storage.removeItem(key, opts),\n    remove: (key, opts = {}) => storage.removeItem(key, opts)\n  };\n  return storage;\n}\nasync function snapshot(storage, base) {\n  base = (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.n)(base);\n  const keys = await storage.getKeys(base);\n  const snapshot2 = {};\n  await Promise.all(\n    keys.map(async (key) => {\n      snapshot2[key.slice(base.length)] = await storage.getItem(key);\n    })\n  );\n  return snapshot2;\n}\nasync function restoreSnapshot(driver, snapshot2, base = \"\") {\n  base = (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.n)(base);\n  await Promise.all(\n    Object.entries(snapshot2).map((e) => driver.setItem(base + e[0], e[1]))\n  );\n}\nfunction watch(driver, onChange, base) {\n  return driver.watch ? driver.watch((event, key) => onChange(event, base + key)) : () => {\n  };\n}\nasync function dispose(driver) {\n  if (typeof driver.dispose === \"function\") {\n    await (0,_shared_unstorage_CoCt7NXC_mjs__WEBPACK_IMPORTED_MODULE_0__.b)(driver.dispose);\n  }\n}\n\nconst builtinDrivers = {\n  \"azure-app-configuration\": \"unstorage/drivers/azure-app-configuration\",\n  \"azureAppConfiguration\": \"unstorage/drivers/azure-app-configuration\",\n  \"azure-cosmos\": \"unstorage/drivers/azure-cosmos\",\n  \"azureCosmos\": \"unstorage/drivers/azure-cosmos\",\n  \"azure-key-vault\": \"unstorage/drivers/azure-key-vault\",\n  \"azureKeyVault\": \"unstorage/drivers/azure-key-vault\",\n  \"azure-storage-blob\": \"unstorage/drivers/azure-storage-blob\",\n  \"azureStorageBlob\": \"unstorage/drivers/azure-storage-blob\",\n  \"azure-storage-table\": \"unstorage/drivers/azure-storage-table\",\n  \"azureStorageTable\": \"unstorage/drivers/azure-storage-table\",\n  \"capacitor-preferences\": \"unstorage/drivers/capacitor-preferences\",\n  \"capacitorPreferences\": \"unstorage/drivers/capacitor-preferences\",\n  \"cloudflare-kv-binding\": \"unstorage/drivers/cloudflare-kv-binding\",\n  \"cloudflareKVBinding\": \"unstorage/drivers/cloudflare-kv-binding\",\n  \"cloudflare-kv-http\": \"unstorage/drivers/cloudflare-kv-http\",\n  \"cloudflareKVHttp\": \"unstorage/drivers/cloudflare-kv-http\",\n  \"cloudflare-r2-binding\": \"unstorage/drivers/cloudflare-r2-binding\",\n  \"cloudflareR2Binding\": \"unstorage/drivers/cloudflare-r2-binding\",\n  \"db0\": \"unstorage/drivers/db0\",\n  \"deno-kv-node\": \"unstorage/drivers/deno-kv-node\",\n  \"denoKVNode\": \"unstorage/drivers/deno-kv-node\",\n  \"deno-kv\": \"unstorage/drivers/deno-kv\",\n  \"denoKV\": \"unstorage/drivers/deno-kv\",\n  \"fs-lite\": \"unstorage/drivers/fs-lite\",\n  \"fsLite\": \"unstorage/drivers/fs-lite\",\n  \"fs\": \"unstorage/drivers/fs\",\n  \"github\": \"unstorage/drivers/github\",\n  \"http\": \"unstorage/drivers/http\",\n  \"indexedb\": \"unstorage/drivers/indexedb\",\n  \"localstorage\": \"unstorage/drivers/localstorage\",\n  \"lru-cache\": \"unstorage/drivers/lru-cache\",\n  \"lruCache\": \"unstorage/drivers/lru-cache\",\n  \"memory\": \"unstorage/drivers/memory\",\n  \"mongodb\": \"unstorage/drivers/mongodb\",\n  \"netlify-blobs\": \"unstorage/drivers/netlify-blobs\",\n  \"netlifyBlobs\": \"unstorage/drivers/netlify-blobs\",\n  \"null\": \"unstorage/drivers/null\",\n  \"overlay\": \"unstorage/drivers/overlay\",\n  \"planetscale\": \"unstorage/drivers/planetscale\",\n  \"redis\": \"unstorage/drivers/redis\",\n  \"s3\": \"unstorage/drivers/s3\",\n  \"session-storage\": \"unstorage/drivers/session-storage\",\n  \"sessionStorage\": \"unstorage/drivers/session-storage\",\n  \"uploadthing\": \"unstorage/drivers/uploadthing\",\n  \"upstash\": \"unstorage/drivers/upstash\",\n  \"vercel-blob\": \"unstorage/drivers/vercel-blob\",\n  \"vercelBlob\": \"unstorage/drivers/vercel-blob\",\n  \"vercel-kv\": \"unstorage/drivers/vercel-kv\",\n  \"vercelKV\": \"unstorage/drivers/vercel-kv\"\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/unstorage/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/unstorage/dist/shared/unstorage.CoCt7NXC.mjs":
/*!*******************************************************************!*\
  !*** ./node_modules/unstorage/dist/shared/unstorage.CoCt7NXC.mjs ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   a: () => (/* binding */ normalizeKey),\n/* harmony export */   b: () => (/* binding */ asyncCall),\n/* harmony export */   c: () => (/* binding */ filterKeyByBase),\n/* harmony export */   d: () => (/* binding */ stringify),\n/* harmony export */   e: () => (/* binding */ deserializeRaw),\n/* harmony export */   f: () => (/* binding */ filterKeyByDepth),\n/* harmony export */   j: () => (/* binding */ joinKeys),\n/* harmony export */   n: () => (/* binding */ normalizeBaseKey),\n/* harmony export */   p: () => (/* binding */ prefixStorage),\n/* harmony export */   s: () => (/* binding */ serializeRaw)\n/* harmony export */ });\nfunction wrapToPromise(value) {\n  if (!value || typeof value.then !== \"function\") {\n    return Promise.resolve(value);\n  }\n  return value;\n}\nfunction asyncCall(function_, ...arguments_) {\n  try {\n    return wrapToPromise(function_(...arguments_));\n  } catch (error) {\n    return Promise.reject(error);\n  }\n}\nfunction isPrimitive(value) {\n  const type = typeof value;\n  return value === null || type !== \"object\" && type !== \"function\";\n}\nfunction isPureObject(value) {\n  const proto = Object.getPrototypeOf(value);\n  return !proto || proto.isPrototypeOf(Object);\n}\nfunction stringify(value) {\n  if (isPrimitive(value)) {\n    return String(value);\n  }\n  if (isPureObject(value) || Array.isArray(value)) {\n    return JSON.stringify(value);\n  }\n  if (typeof value.toJSON === \"function\") {\n    return stringify(value.toJSON());\n  }\n  throw new Error(\"[unstorage] Cannot stringify value!\");\n}\nconst BASE64_PREFIX = \"base64:\";\nfunction serializeRaw(value) {\n  if (typeof value === \"string\") {\n    return value;\n  }\n  return BASE64_PREFIX + base64Encode(value);\n}\nfunction deserializeRaw(value) {\n  if (typeof value !== \"string\") {\n    return value;\n  }\n  if (!value.startsWith(BASE64_PREFIX)) {\n    return value;\n  }\n  return base64Decode(value.slice(BASE64_PREFIX.length));\n}\nfunction base64Decode(input) {\n  if (globalThis.Buffer) {\n    return Buffer.from(input, \"base64\");\n  }\n  return Uint8Array.from(\n    globalThis.atob(input),\n    (c) => c.codePointAt(0)\n  );\n}\nfunction base64Encode(input) {\n  if (globalThis.Buffer) {\n    return Buffer.from(input).toString(\"base64\");\n  }\n  return globalThis.btoa(String.fromCodePoint(...input));\n}\n\nconst storageKeyProperties = [\n  \"has\",\n  \"hasItem\",\n  \"get\",\n  \"getItem\",\n  \"getItemRaw\",\n  \"set\",\n  \"setItem\",\n  \"setItemRaw\",\n  \"del\",\n  \"remove\",\n  \"removeItem\",\n  \"getMeta\",\n  \"setMeta\",\n  \"removeMeta\",\n  \"getKeys\",\n  \"clear\",\n  \"mount\",\n  \"unmount\"\n];\nfunction prefixStorage(storage, base) {\n  base = normalizeBaseKey(base);\n  if (!base) {\n    return storage;\n  }\n  const nsStorage = { ...storage };\n  for (const property of storageKeyProperties) {\n    nsStorage[property] = (key = \"\", ...args) => (\n      // @ts-ignore\n      storage[property](base + key, ...args)\n    );\n  }\n  nsStorage.getKeys = (key = \"\", ...arguments_) => storage.getKeys(base + key, ...arguments_).then((keys) => keys.map((key2) => key2.slice(base.length)));\n  nsStorage.getItems = async (items, commonOptions) => {\n    const prefixedItems = items.map(\n      (item) => typeof item === \"string\" ? base + item : { ...item, key: base + item.key }\n    );\n    const results = await storage.getItems(prefixedItems, commonOptions);\n    return results.map((entry) => ({\n      key: entry.key.slice(base.length),\n      value: entry.value\n    }));\n  };\n  nsStorage.setItems = async (items, commonOptions) => {\n    const prefixedItems = items.map((item) => ({\n      key: base + item.key,\n      value: item.value,\n      options: item.options\n    }));\n    return storage.setItems(prefixedItems, commonOptions);\n  };\n  return nsStorage;\n}\nfunction normalizeKey(key) {\n  if (!key) {\n    return \"\";\n  }\n  return key.split(\"?\")[0]?.replace(/[/\\\\]/g, \":\").replace(/:+/g, \":\").replace(/^:|:$/g, \"\") || \"\";\n}\nfunction joinKeys(...keys) {\n  return normalizeKey(keys.join(\":\"));\n}\nfunction normalizeBaseKey(base) {\n  base = normalizeKey(base);\n  return base ? base + \":\" : \"\";\n}\nfunction filterKeyByDepth(key, depth) {\n  if (depth === void 0) {\n    return true;\n  }\n  let substrCount = 0;\n  let index = key.indexOf(\":\");\n  while (index > -1) {\n    substrCount++;\n    index = key.indexOf(\":\", index + 1);\n  }\n  return substrCount <= depth;\n}\nfunction filterKeyByBase(key, base) {\n  if (base) {\n    return key.startsWith(base) && key[key.length - 1] !== \"$\";\n  }\n  return key[key.length - 1] !== \"$\";\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdW5zdG9yYWdlL2Rpc3Qvc2hhcmVkL3Vuc3RvcmFnZS5Db0N0N05YQy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQTJEO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRTRNIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXGF2YXg0XFxPbmVEcml2ZVxcRG9jdW1lbnRzXFxHaXRIdWJcXGN1YmUtc3luZGljYXRlXFxub2RlX21vZHVsZXNcXHVuc3RvcmFnZVxcZGlzdFxcc2hhcmVkXFx1bnN0b3JhZ2UuQ29DdDdOWEMubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHdyYXBUb1Byb21pc2UodmFsdWUpIHtcbiAgaWYgKCF2YWx1ZSB8fCB0eXBlb2YgdmFsdWUudGhlbiAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gYXN5bmNDYWxsKGZ1bmN0aW9uXywgLi4uYXJndW1lbnRzXykge1xuICB0cnkge1xuICAgIHJldHVybiB3cmFwVG9Qcm9taXNlKGZ1bmN0aW9uXyguLi5hcmd1bWVudHNfKSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgfVxufVxuZnVuY3Rpb24gaXNQcmltaXRpdmUodmFsdWUpIHtcbiAgY29uc3QgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuIHZhbHVlID09PSBudWxsIHx8IHR5cGUgIT09IFwib2JqZWN0XCIgJiYgdHlwZSAhPT0gXCJmdW5jdGlvblwiO1xufVxuZnVuY3Rpb24gaXNQdXJlT2JqZWN0KHZhbHVlKSB7XG4gIGNvbnN0IHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbHVlKTtcbiAgcmV0dXJuICFwcm90byB8fCBwcm90by5pc1Byb3RvdHlwZU9mKE9iamVjdCk7XG59XG5mdW5jdGlvbiBzdHJpbmdpZnkodmFsdWUpIHtcbiAgaWYgKGlzUHJpbWl0aXZlKHZhbHVlKSkge1xuICAgIHJldHVybiBTdHJpbmcodmFsdWUpO1xuICB9XG4gIGlmIChpc1B1cmVPYmplY3QodmFsdWUpIHx8IEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlLnRvSlNPTiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgcmV0dXJuIHN0cmluZ2lmeSh2YWx1ZS50b0pTT04oKSk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFwiW3Vuc3RvcmFnZV0gQ2Fubm90IHN0cmluZ2lmeSB2YWx1ZSFcIik7XG59XG5jb25zdCBCQVNFNjRfUFJFRklYID0gXCJiYXNlNjQ6XCI7XG5mdW5jdGlvbiBzZXJpYWxpemVSYXcodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICByZXR1cm4gQkFTRTY0X1BSRUZJWCArIGJhc2U2NEVuY29kZSh2YWx1ZSk7XG59XG5mdW5jdGlvbiBkZXNlcmlhbGl6ZVJhdyh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmICghdmFsdWUuc3RhcnRzV2l0aChCQVNFNjRfUFJFRklYKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICByZXR1cm4gYmFzZTY0RGVjb2RlKHZhbHVlLnNsaWNlKEJBU0U2NF9QUkVGSVgubGVuZ3RoKSk7XG59XG5mdW5jdGlvbiBiYXNlNjREZWNvZGUoaW5wdXQpIHtcbiAgaWYgKGdsb2JhbFRoaXMuQnVmZmVyKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKGlucHV0LCBcImJhc2U2NFwiKTtcbiAgfVxuICByZXR1cm4gVWludDhBcnJheS5mcm9tKFxuICAgIGdsb2JhbFRoaXMuYXRvYihpbnB1dCksXG4gICAgKGMpID0+IGMuY29kZVBvaW50QXQoMClcbiAgKTtcbn1cbmZ1bmN0aW9uIGJhc2U2NEVuY29kZShpbnB1dCkge1xuICBpZiAoZ2xvYmFsVGhpcy5CdWZmZXIpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20oaW5wdXQpLnRvU3RyaW5nKFwiYmFzZTY0XCIpO1xuICB9XG4gIHJldHVybiBnbG9iYWxUaGlzLmJ0b2EoU3RyaW5nLmZyb21Db2RlUG9pbnQoLi4uaW5wdXQpKTtcbn1cblxuY29uc3Qgc3RvcmFnZUtleVByb3BlcnRpZXMgPSBbXG4gIFwiaGFzXCIsXG4gIFwiaGFzSXRlbVwiLFxuICBcImdldFwiLFxuICBcImdldEl0ZW1cIixcbiAgXCJnZXRJdGVtUmF3XCIsXG4gIFwic2V0XCIsXG4gIFwic2V0SXRlbVwiLFxuICBcInNldEl0ZW1SYXdcIixcbiAgXCJkZWxcIixcbiAgXCJyZW1vdmVcIixcbiAgXCJyZW1vdmVJdGVtXCIsXG4gIFwiZ2V0TWV0YVwiLFxuICBcInNldE1ldGFcIixcbiAgXCJyZW1vdmVNZXRhXCIsXG4gIFwiZ2V0S2V5c1wiLFxuICBcImNsZWFyXCIsXG4gIFwibW91bnRcIixcbiAgXCJ1bm1vdW50XCJcbl07XG5mdW5jdGlvbiBwcmVmaXhTdG9yYWdlKHN0b3JhZ2UsIGJhc2UpIHtcbiAgYmFzZSA9IG5vcm1hbGl6ZUJhc2VLZXkoYmFzZSk7XG4gIGlmICghYmFzZSkge1xuICAgIHJldHVybiBzdG9yYWdlO1xuICB9XG4gIGNvbnN0IG5zU3RvcmFnZSA9IHsgLi4uc3RvcmFnZSB9O1xuICBmb3IgKGNvbnN0IHByb3BlcnR5IG9mIHN0b3JhZ2VLZXlQcm9wZXJ0aWVzKSB7XG4gICAgbnNTdG9yYWdlW3Byb3BlcnR5XSA9IChrZXkgPSBcIlwiLCAuLi5hcmdzKSA9PiAoXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBzdG9yYWdlW3Byb3BlcnR5XShiYXNlICsga2V5LCAuLi5hcmdzKVxuICAgICk7XG4gIH1cbiAgbnNTdG9yYWdlLmdldEtleXMgPSAoa2V5ID0gXCJcIiwgLi4uYXJndW1lbnRzXykgPT4gc3RvcmFnZS5nZXRLZXlzKGJhc2UgKyBrZXksIC4uLmFyZ3VtZW50c18pLnRoZW4oKGtleXMpID0+IGtleXMubWFwKChrZXkyKSA9PiBrZXkyLnNsaWNlKGJhc2UubGVuZ3RoKSkpO1xuICBuc1N0b3JhZ2UuZ2V0SXRlbXMgPSBhc3luYyAoaXRlbXMsIGNvbW1vbk9wdGlvbnMpID0+IHtcbiAgICBjb25zdCBwcmVmaXhlZEl0ZW1zID0gaXRlbXMubWFwKFxuICAgICAgKGl0ZW0pID0+IHR5cGVvZiBpdGVtID09PSBcInN0cmluZ1wiID8gYmFzZSArIGl0ZW0gOiB7IC4uLml0ZW0sIGtleTogYmFzZSArIGl0ZW0ua2V5IH1cbiAgICApO1xuICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCBzdG9yYWdlLmdldEl0ZW1zKHByZWZpeGVkSXRlbXMsIGNvbW1vbk9wdGlvbnMpO1xuICAgIHJldHVybiByZXN1bHRzLm1hcCgoZW50cnkpID0+ICh7XG4gICAgICBrZXk6IGVudHJ5LmtleS5zbGljZShiYXNlLmxlbmd0aCksXG4gICAgICB2YWx1ZTogZW50cnkudmFsdWVcbiAgICB9KSk7XG4gIH07XG4gIG5zU3RvcmFnZS5zZXRJdGVtcyA9IGFzeW5jIChpdGVtcywgY29tbW9uT3B0aW9ucykgPT4ge1xuICAgIGNvbnN0IHByZWZpeGVkSXRlbXMgPSBpdGVtcy5tYXAoKGl0ZW0pID0+ICh7XG4gICAgICBrZXk6IGJhc2UgKyBpdGVtLmtleSxcbiAgICAgIHZhbHVlOiBpdGVtLnZhbHVlLFxuICAgICAgb3B0aW9uczogaXRlbS5vcHRpb25zXG4gICAgfSkpO1xuICAgIHJldHVybiBzdG9yYWdlLnNldEl0ZW1zKHByZWZpeGVkSXRlbXMsIGNvbW1vbk9wdGlvbnMpO1xuICB9O1xuICByZXR1cm4gbnNTdG9yYWdlO1xufVxuZnVuY3Rpb24gbm9ybWFsaXplS2V5KGtleSkge1xuICBpZiAoIWtleSkge1xuICAgIHJldHVybiBcIlwiO1xuICB9XG4gIHJldHVybiBrZXkuc3BsaXQoXCI/XCIpWzBdPy5yZXBsYWNlKC9bL1xcXFxdL2csIFwiOlwiKS5yZXBsYWNlKC86Ky9nLCBcIjpcIikucmVwbGFjZSgvXjp8OiQvZywgXCJcIikgfHwgXCJcIjtcbn1cbmZ1bmN0aW9uIGpvaW5LZXlzKC4uLmtleXMpIHtcbiAgcmV0dXJuIG5vcm1hbGl6ZUtleShrZXlzLmpvaW4oXCI6XCIpKTtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZUJhc2VLZXkoYmFzZSkge1xuICBiYXNlID0gbm9ybWFsaXplS2V5KGJhc2UpO1xuICByZXR1cm4gYmFzZSA/IGJhc2UgKyBcIjpcIiA6IFwiXCI7XG59XG5mdW5jdGlvbiBmaWx0ZXJLZXlCeURlcHRoKGtleSwgZGVwdGgpIHtcbiAgaWYgKGRlcHRoID09PSB2b2lkIDApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBsZXQgc3Vic3RyQ291bnQgPSAwO1xuICBsZXQgaW5kZXggPSBrZXkuaW5kZXhPZihcIjpcIik7XG4gIHdoaWxlIChpbmRleCA+IC0xKSB7XG4gICAgc3Vic3RyQ291bnQrKztcbiAgICBpbmRleCA9IGtleS5pbmRleE9mKFwiOlwiLCBpbmRleCArIDEpO1xuICB9XG4gIHJldHVybiBzdWJzdHJDb3VudCA8PSBkZXB0aDtcbn1cbmZ1bmN0aW9uIGZpbHRlcktleUJ5QmFzZShrZXksIGJhc2UpIHtcbiAgaWYgKGJhc2UpIHtcbiAgICByZXR1cm4ga2V5LnN0YXJ0c1dpdGgoYmFzZSkgJiYga2V5W2tleS5sZW5ndGggLSAxXSAhPT0gXCIkXCI7XG4gIH1cbiAgcmV0dXJuIGtleVtrZXkubGVuZ3RoIC0gMV0gIT09IFwiJFwiO1xufVxuXG5leHBvcnQgeyBub3JtYWxpemVLZXkgYXMgYSwgYXN5bmNDYWxsIGFzIGIsIGZpbHRlcktleUJ5QmFzZSBhcyBjLCBzdHJpbmdpZnkgYXMgZCwgZGVzZXJpYWxpemVSYXcgYXMgZSwgZmlsdGVyS2V5QnlEZXB0aCBhcyBmLCBqb2luS2V5cyBhcyBqLCBub3JtYWxpemVCYXNlS2V5IGFzIG4sIHByZWZpeFN0b3JhZ2UgYXMgcCwgc2VyaWFsaXplUmF3IGFzIHMgfTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/unstorage/dist/shared/unstorage.CoCt7NXC.mjs\n");

/***/ })

};
;